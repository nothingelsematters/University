package serpent

import org.junit.Test
import org.junit.runner.JUnitCore
import org.junit.Assert.assertEquals
import org.junit.Assert.assertTrue

import java.math.BigInteger
import java.io.File

class SerpentTest {
    private fun List<Int>.toListByte(): List<Byte> = map { it.toByte() }

    private fun fromFile(fileName: String, length: Int): List<Byte> {
        val bytes = ByteArray(length)
        val stream = File(fileName).inputStream()
        stream.read(bytes)
        stream.close()
        return bytes.toList()
    }
    var z = 0

    fun blockComp(f: List<Byte>, s: List<Byte>) {
        for (i in 0 until maxOf(f.size, s.size) / 128) {
            assertEquals(f.subList(i * 16, (i + 1) * 16), s.subList(i * 16, (i + 1) * 16))
        }
    }

    private fun testEncoding(key: List<Byte>, message: List<Byte>, encrypted: List<Byte>) =
        assertEquals(encrypted, encrypt(key, message))

    private fun testDecodeEncoded(key: List<Byte>, message: List<Byte>) {
        val k = encrypt(key, message)
        z = k.size
        blockComp(message, decrypt(key, k))
    }

    @Test fun `test 1 simple encrypt`() = testEncoding(
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
               0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f).toListByte(),
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f).toListByte(),
        listOf(0xde, 0x26, 0x9f, 0xf8, 0x33, 0xe4, 0x32, 0xb8, 0x5b, 0x2e, 0x88, 0xd2, 0x70, 0x1c, 0xe7, 0x5c).toListByte()
    )

    @Test fun `test 2 2000 bytes file encrypt`() = testEncoding(
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
               0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f).toListByte(),
        fromFile("tests/encryption.in", 2000),
        fromFile("tests/encryption.out", 2000)
    )

    @Test fun `test 3 simple encrypt-decrypt`() = testDecodeEncoded(
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
               0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f).toListByte(),
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f).toListByte()
    )

    @Test fun `test 4 2000 bytes file encrypt`() = testDecodeEncoded(
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
               0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f).toListByte(),
        fromFile("tests/encryption.in", 2000)
    )

    /* @Test fun `test 5 67Mb test`() = testDecodeEncoded(
        listOf(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
               0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f).toListByte(),
        fromFile("tests/second.in", 65536)
    ) */
}
